import { Weight } from '../src/models/weight';
import { Telegraf } from 'telegraf';

export class Scheduler {
    private bot: Telegraf;

    constructor(bot: Telegraf) {
        this.bot = bot;
    }

    public async setupDailyReminder(userId: number) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 9 —É—Ç—Ä–∞
        const now = new Date();
        const targetTime = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate(),
            9, 0, 0
        );

        if (now > targetTime) {
            targetTime.setDate(targetTime.getDate() + 1);
        }

        const timeUntilFirstReminder = targetTime.getTime() - now.getTime();

        setTimeout(() => {
            this.sendDailyQuestion(userId);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            setInterval(() => this.sendDailyQuestion(userId), 24 * 60 * 60 * 1000);
        }, timeUntilFirstReminder);
    }

    private async sendDailyQuestion(userId: number) {
        try {
            await this.bot.telegram.sendMessage(
                userId,
                '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:'
            );
        } catch (error) {
            console.error('Error sending daily question:', error);
        }
    }

    public async sendWeeklyReport(userId: number) {
        try {
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            const weights = await Weight.find({
                userId,
                date: { $gte: oneWeekAgo }
            }).sort({ date: 1 });

            if (weights.length < 2) {
                await this.bot.telegram.sendMessage(
                    userId,
                    '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.'
                );
                return;
            }

            const firstWeight = weights[0].weight;
            const lastWeight = weights[weights.length - 1].weight;
            const difference = lastWeight - firstWeight;

            let message = 'üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤–µ—Å—É:\n\n';
            message += `–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: ${firstWeight} –∫–≥\n`;
            message += `–ö–æ–Ω–µ—á–Ω—ã–π –≤–µ—Å: ${lastWeight} –∫–≥\n`;
            message += `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${difference > 0 ? '+' : ''}${difference.toFixed(1)} –∫–≥\n\n`;

            if (difference > 0) {
                message += '–í—ã –Ω–∞–±—Ä–∞–ª–∏ –≤–µ—Å –∑–∞ –Ω–µ–¥–µ–ª—é.';
            } else if (difference < 0) {
                message += '–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –≤–µ—Å –∑–∞ –Ω–µ–¥–µ–ª—é! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
            } else {
                message += '–í–∞—à –≤–µ—Å –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.';
            }

            await this.bot.telegram.sendMessage(userId, message);
        } catch (error) {
            console.error('Error sending weekly report:', error);
        }
    }
}